// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String?  
  image     String?
  provider  String   @default("credentials")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studio    Studio?  @relation("UserStudio")
  
  @@index([id])
}

model Studio {
  id                         String   @id @default(uuid())
  studioSlug                 String   @unique
  studioName                 String
  token                      String   @unique @default(cuid())

  // settings
  enableLobby                Boolean  @default(false)
  enableCaptions             Boolean  @default(false)
  recordingType              RecordingType  @default(VIDEO_AUDIO)
  audioSampleRate            AudioSampleRate  @default(KHZ_44_1)
  videoQuality               VideoQuality  @default(STANDARD)
  countdownBeforeRecording   Boolean  @default(false)
  autoStartOnGuestJoin       Boolean  @default(false)
  noiseReduction             Boolean  @default(false)
  pauseUploads               Boolean  @default(false)
  language                   String   @default("English")
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // user
  user       User     @relation("UserStudio", fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique
  projects  Project[] @relation("StudioProject")

  @@index([id, userId ,studioSlug])
}

enum RecordingType {
  VIDEO_AUDIO
  AUDIO_ONLY
}

enum AudioSampleRate {
  KHZ_44_1
  KHZ_48
}

enum VideoQuality {
  STANDARD
  ADVANCED
}

model Project {
  id         String   @id @default(uuid())
  title      String
  studioId   String
  createdAt  DateTime @default(now())

  studio     Studio   @relation("StudioProject", fields: [studioId], references: [id], onDelete: Cascade)
  tracks     Track[] @relation("ProjectTrack")

  @@index([id, studioId])
}

model Track {
  id             String   @id @default(uuid())
  name           String?
  projectId      String
  mergedVideoUrl String?
  createdAt      DateTime @default(now())

  project        Project  @relation("ProjectTrack", fields: [projectId], references: [id])
  recordings     Recording[] @relation("RecordingTrack")

  @@index([id, projectId])
}

model Recording {
  id           String   @id @default(uuid())
  trackId      String
  displayName  String
  videoUrl     String?
  duration     Int? 
  resolution   String? @default("1280x720")
  thumbnailUrl String? @default("https://via.placeholder.com/150")
  status       RecordingStatus   @default(RECORDING)
  createdAt    DateTime @default(now())

  track        Track    @relation("RecordingTrack", fields: [trackId], references: [id])

  @@index([id, trackId])
}

enum RecordingStatus {
  RECORDING
  MERGING
  COMPLETED
  FAILED
}